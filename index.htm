<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Google</title>
    <style>
       body {
            margin: 0;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: white;
        }
        img {
            max-width: 500px;
            height: 400px;
            animation: color-invert 0.5s infinite; /* 0.5秒ごとに色反転 */
        }
        @keyframes color-invert {
            0%, 100% { filter: invert(0); }
            50% { filter: invert(1); }
        }
        /* フルスクリーン用 */
        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background-color: black;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .fullscreen img {
            max-width: 100%;
            max-height: 100%;
            animation: none; /* 色反転なし */
        }
    </style>
</head>
<body>
<center>
    <h1><img src="https://pbs.twimg.com/media/FFNCY1faQAQjA2X.jpg"><br>国宝田所浩二</h1>
</center>

<audio id="mainAudio" autoplay>
    <source src="ムキムキダンス先輩.mp3" type="audio/mpeg">
</audio>

<script>
let windows = []; // 開いたウィンドウを保存
const maxWindows = 2; // 最大ウィンドウ数
let finishedWindows = 0; // 曲が終了したウィンドウの数
let moveIntervals = []; // ウィンドウの移動インターバルを保存

function openDynamicWindow(url) {
    // 閉じたウィンドウを削除
    windows = windows.filter(w => !w.closed);

    // ウィンドウが2つ以上開いている場合は新しいウィンドウを開かない
    if (windows.length >= maxWindows) return;

    const win = window.open(url, '_blank', `width=400,height=400`);
    if (!win) return;

    windows.push(win);

    // ウィンドウ内の音楽再生監視
    win.onload = () => {
        let audio = win.document.querySelector("audio");
        if (audio) {
            audio.onended = () => {
                finishedWindows++;
                checkAllFinished();
            };
        }
    };

    // ウィンドウをランダムに移動
    const moveWindow = setInterval(() => {
        if (win.closed) {
            clearInterval(moveWindow);
            windows = windows.filter(w => !w.closed);
            return;
        }
        const x = Math.random() * window.screen.availWidth;
        const y = Math.random() * window.screen.availHeight;
        win.moveTo(x, y);
    }, 50);
    moveIntervals.push(moveWindow); // インターバル保存
}

// 0.3秒ごとにウィンドウを開く
setInterval(() => {
    openDynamicWindow(window.location.href);
}, 300);

// 't'キーで全ウィンドウを閉じる
document.addEventListener('keydown', function(event) {
    if (event.key === 't') {
        windows.forEach(win => {
            if (!win.closed) win.close();
        });
        windows = [];
    }
});

// すべての曲が終了したかチェック
function checkAllFinished() {
    if (finishedWindows >= maxWindows) {
        showFullScreenImage();
        stopWindowMovement();
    }
}

// フルスクリーン表示＆デデドン.mp3再生
function showFullScreenImage() {
    let fullscreenDiv = document.createElement("div");
    fullscreenDiv.classList.add("fullscreen");

    let img = document.createElement("img");
    img.src = "https://img.atwiki.jp/cookie_kaisetu/attach/1247/723/YJSNPI.jpg"; // 新しい画像URL
    fullscreenDiv.appendChild(img);

    document.body.innerHTML = ""; // 既存のコンテンツ削除
    document.body.appendChild(fullscreenDiv);

    // フルスクリーンを要求
    if (document.documentElement.requestFullscreen) {
        document.documentElement.requestFullscreen();
    } else if (document.documentElement.mozRequestFullScreen) { // Firefox用
        document.documentElement.mozRequestFullScreen();
    } else if (document.documentElement.webkitRequestFullscreen) { // Chrome, Safari用
        document.documentElement.webkitRequestFullscreen();
    } else if (document.documentElement.msRequestFullscreen) { // IE用
        document.documentElement.msRequestFullscreen();
    }

    let dededonAudio = new Audio("../デデドン.mp3");
    dededonAudio.play();
}

// ウィンドウの移動を止める
function stopWindowMovement() {
    moveIntervals.forEach(interval => clearInterval(interval));
    moveIntervals = []; // インターバルをリセット
}
</script>

</body>
</html>
